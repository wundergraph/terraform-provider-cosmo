package feature_flags

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/wundergraph/cosmo/terraform-provider-cosmo/internal/api"
	"github.com/wundergraph/cosmo/terraform-provider-cosmo/internal/utils"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &FeatureFlagDataSource{}

func NewFeatureFlagDataSource() datasource.DataSource {
	return &FeatureFlagDataSource{}
}

// FeatureFlagsDataSource defines the data source implementation.
type FeatureFlagDataSource struct {
	client *api.PlatformClient
}

// FeatureFlagsDataSourceModel describes the data source data model.
type FeatureFlagsDataSourceModel struct {
	Id                   types.String `tfsdk:"id"`
	Name                 types.String `tfsdk:"name"`
	Namespace            types.String `tfsdk:"namespace"`
	IsEnabled            types.Bool   `tfsdk:"is_enabled"`
	Labels               types.Map    `tfsdk:"labels"`
	FeatureSubgraphNames types.List   `tfsdk:"feature_subgraph_names"`
}

func (d *FeatureFlagDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_feature_flag"
}

func (d *FeatureFlagDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Cosmo Feature Flags Data Source",

		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "The unique identifier of the feature flag resource, automatically generated by the system.",
			},
			"name": schema.StringAttribute{
				MarkdownDescription: "The name of the feature flag.",
				Required:            true,
			},
			"namespace": schema.StringAttribute{
				MarkdownDescription: "The namespace in which the feature flag is located.",
				Required:            true,
			},
			"is_enabled": schema.BoolAttribute{
				MarkdownDescription: "Indicates whether the feature flag is enabled.",
				Computed:            true,
			},
			"labels": schema.MapAttribute{
				MarkdownDescription: "A list of labels associated with the feature flag.",
				Computed:            true,
				ElementType:         types.StringType,
			},
			"feature_subgraph_names": schema.ListAttribute{
				MarkdownDescription: "A list of feature subgraph names associated with the feature flag.",
				Computed:            true,
				ElementType:         types.StringType,
			},
		},
	}
}

func (d *FeatureFlagDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*api.PlatformClient)
	if !ok {
		utils.AddDiagnosticError(resp, ErrUnexpectedDataSourceType, fmt.Sprintf("Expected *http.Client, got: %T. Please report this issue to the provider developers.", req.ProviderData))
		return
	}

	d.client = client
}

func (d *FeatureFlagDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data FeatureFlagsDataSourceModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	if data.Name.IsNull() || data.Name.ValueString() == "" {
		utils.AddDiagnosticError(resp, ErrInvalidGraphName, "The 'name' attribute is required.")
		return
	}

	namespace := data.Namespace.ValueString()
	if namespace == "" {
		namespace = "default"
	}

	apiResponse, err := d.client.GetFeatureFlag(ctx, data.Name.ValueString(), namespace)
	if err != nil {
		utils.AddDiagnosticError(resp, ErrReadingGraph, fmt.Sprintf("Could not read feature flag: %s", err))
		return
	}

	featureFlag := apiResponse.FeatureFlag
	data.Id = types.StringValue(featureFlag.GetId())
	data.Name = types.StringValue(featureFlag.GetName())
	data.Namespace = types.StringValue(featureFlag.GetNamespace())
	data.IsEnabled = types.BoolValue(featureFlag.GetIsEnabled())
	tflog.Trace(ctx, "Read feature flag data source", map[string]interface{}{
		"id": data.Id.ValueString(),
	})

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
